#lang racket

(define (make-dual n d) (cons n d))
(define (val x)  (car x))
(define (dval x) (cdr x))
(define (make-variable x) (make-dual x 1))

(define (add-dual u v)
    (make-dual (+ (val u)  (val v))
         (+ (dval u) (dval v))))
(define x (make-variable 2))
(add-dual x x)

(define (sub-dual u v)
    (make-dual (- (val u)  (val v))
         (- (dval u) (dval v))))
(define (mult-dual u v)
    (make-dual (* (val u)  (val v))
         (+ (dval u) (dval v))))
(define (div-dual u v)
  (if (= (val v) 0)
      (error "Cannot use one of the values, cannot divide by 0")
      (make-dual (/ (val u) (val v))
         (/ (- (* (dval u) (val v)) (* (val u) (dval v))) (* (val v) (val v))))))
(define (sin-dual u)
    (make-dual (sin(val u))
         (* (dval u) (cos(val u)))))
(define (cos-dual u)
    (make-dual (cos(val u))
         (* -1 (dval u) (sin(val u)))))
(define (exp-dual u) ;; exp -> ln
    (make-dual (exp (val u))
         (* (dval u) (exp (val u)))))
(define (log-dual u)
    (make-dual (log (val u))
         (/ (dval u) (val u))))
(define (pow-dual u k)
    (make-dual (expt (val u) k)
         (* (* k (expt (val u) (- k 1))) (dval u))))
(define (abs-dual u)
    (make-dual (abs (val u))
         (* (dval u) (sign (val u)))))

(define (sign i)
  (if (< i 0)
      -1
      (if (= i 0)
          0
          1))
  )

(sub-dual x x)
(mult-dual x x)
(div-dual x x)
(sin-dual x)
(cos-dual x)
(exp-dual x)
(log-dual x)
(pow-dual x 1)
(abs-dual x)

